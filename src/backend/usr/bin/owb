#!/usr/bin/python
# -*- encoding: utf-8 -*-
from __future__ import print_function

import sys
reload(sys)
sys.setdefaultencoding('utf8')
sys.excepthook = None

import os
import random
import re
import pip

from pkg_resources import parse_version

def pip_version_check(path):
    def version_number_compare(version1, version2):
        return cmp(parse_version(version1), parse_version(version2))

    installed_packages = dict()
    for dist in pip.get_installed_distributions(local_only=False):
        installed_packages[dist.project_name.lower()] = dist.version

    unmet_requirements = []
    with open(path, "r") as rf:
        p = re.compile('\s*(?P<package>[a-zA-Z0-9_.]+)(?P<condition>([<=>]){2}|([<>]){1})?(?P<version>\S+)?')
        while 1:
            requirement = rf.readline().strip()
            if not requirement:
                break
            match = p.match(requirement)
            if match:
                package = match.group('package').lower()
                version = match.group('version')
                condition = match.group('condition')

                if package in installed_packages:
                    pass
                elif package.replace('_', '-') in installed_packages:
                    package = package.replace('_', '-')
                else:
                    unmet_requirements.append([requirement, ""])
                    continue

                if condition:
                    installed_version = installed_packages[package]

                    check = version_number_compare(installed_version, version)
                    if condition == "<":
                        if check >= 0:
                            unmet_requirements.append([requirement, installed_version])
                    elif condition == "<=":
                        if check > 0:
                            unmet_requirements.append([requirement, installed_version])
                    elif condition == "==":
                        if check != 0:
                            unmet_requirements.append([requirement, installed_version])
                    elif condition == ">=":
                        if check < 0:
                            unmet_requirements.append([requirement, installed_version])
                    elif condition == ">":
                        if check <= 0:
                            unmet_requirements.append([requirement, installed_version])

    if unmet_requirements:
        print("Some Owb requirements are unmet\n")
        print("Unmet requirements:")
        for unmet_requirement_desc in unmet_requirements:
            if unmet_requirement_desc[1] != "":
                print("\t", unmet_requirement_desc[0] + " [ Installed", unmet_requirement_desc[1], "]")
            else:
                print("\t", unmet_requirement_desc[0])
        print("\n")
        print("The problem can be solved by:")
        print("Installing missing requirements using rm -rf /tmp/pip-build-root/ && pip install -r /usr/share/globaleaks/backend/requirements.txt")
        quit(-1)

print("Starting Owb")

this_directory = os.path.dirname(__file__)
root = os.path.abspath(os.path.join(this_directory, '..'))
sys.path.insert(0, root)

requirements_path = os.path.join(root, 'requirements.txt')
if not os.path.exists(requirements_path):
    requirements_path = '/usr/local/owb/backend/usr/share/requirements.txt'

pip_version_check(requirements_path)

from twisted.python import usage
from twisted.scripts._twistd_unix import ServerOptions

from globaleaks import DATABASE_VERSION
from globaleaks.db import check_db_files
from globaleaks.runner import GlobaLeaksRunner
from globaleaks.utils.utility import log, query_yes_no
from globaleaks.utils.mailutils import mail_exception_handler
from globaleaks.settings import GLSettings

GLSettings.parser.add_option("-n", "--nodaemon", action='store_true',
    help="don't daemonize",
    dest="nodaemon", default=False)

GLSettings.parser.add_option("-l", "--loglevel", type="choice",
    choices=['CRITICAL', 'ERROR', 'INFO', 'DEBUG', 'TIMEDEBUG'],
    help="set log level [default: %default]",
    dest="loglevel", default=GLSettings.loglevel)

GLSettings.parser.add_option("-i", "--ip", type="string",
    help="IP address(s) used for listening [default: %default]",
    dest="ip", default=GLSettings.bind_addresses)

GLSettings.parser.add_option("-p", "--port", type="int",
    help="TCP port used for listening [default: %default]",
    dest="port", default=GLSettings.bind_port)

GLSettings.parser.add_option("-a", "--accept-host", type="string",
    help="specify a list comma separated of hostname acceptable by the HTTP server"\
            "If some hosts are specified, defaults are not more included in the allowed list) [default: %default]",
    dest="host_list", default=GLSettings.accepted_hosts)

GLSettings.parser.add_option("-s", "--socks-host", type="string",
    help="set Socks host to use for Tor [default: %default]",
    dest="socks_host", default=GLSettings.socks_host)

GLSettings.parser.add_option("-r", "--socks-port", type="int",
    help="set Socks port to use for Tor [default: %default]",
    dest="socks_port", default=GLSettings.socks_port)

GLSettings.parser.add_option("-t", "--side-channels-guard", type="int",
    help="security guard time to wich uniform request times to reduce side channels analysis (ms) [default: 150]",
    dest="side_channels_guard", default=150)

GLSettings.parser.add_option("-d", "--disable-mail-torification", action='store_true',
    help="disable mail torification [default: False]",
    dest="disable_mail_torification", default=False)

GLSettings.parser.add_option("-f", "--disable-mail-notification", action='store_true',
    help="disable mail notification [default: False]",
    dest="disable_mail_notification", default=False)

GLSettings.parser.add_option("-b", "--disable-backend-exception-notification", action='store_true',
    help="disable backend_exception_notification [default: False]",
    dest="disable_backend_exception_notification", default=False)

GLSettings.parser.add_option("-e", "--disable-client-exception-notification", action='store_true',
    help="disable_client_exception_notification [default: False]",
    dest="disable_client_exception_notification", default=False)

GLSettings.parser.add_option("-m", "--disks-alarm-threshold", type='int',
    help="takes 1, 2, 3, set disk alarm threshold [default: 0]",
    dest="disk_alarm_threshold", default=0)

GLSettings.parser.add_option("-x", "--tor-dir", type="string",
    help="Tor directory, acquire hidden service and set onion.to proxy [default: None]",
    dest="tor_dir")

GLSettings.parser.add_option("-u", "--user", type="string",
    help="set the user to run as [default: current_user]",
    dest="user")

GLSettings.parser.add_option("-g", "--group", type="string",
    help="set the group to run as [default: current_user]",
    dest="group")

GLSettings.parser.add_option("-w", "--working-path", type="string",
    help="set the backend working directory",
    dest="working_path", default=None)

GLSettings.parser.add_option("-c", "--start-clean", action='store_true',
    help="start a clean globaleks install [default: %default]",
    dest="start_clean", default=False)

GLSettings.parser.add_option("-k", "--kill", type="int",
    help="signal to send to the current globaleaks process (if exists)",
    dest="kill", default=0)

GLSettings.parser.add_option("-W", "--skip-wizard", action='store_true',
    help="skip globaleaks installation wizard' [default: False]",
    dest="skip_wizard", default=False)

GLSettings.parser.add_option("-C", "--client-path", type='string',
    help="specify GLClient path",
    dest="client_path", default=None)

GLSettings.parser.add_option("-R", "--ramdisk", type="string",
    help="optionally specify a path used as ramdisk storage",
    dest="ramdisk")

GLSettings.parser.add_option("-z", "--devel-mode", type='string',
    help="hack some configs, specify your name to receive personalized exceptions' [default: %default]",
    dest="developer_name")

GLSettings.parser.add_option("--XXX", type='string',
    help="hardcore debug only options: check NOTES.md file (AVAILABLE ONLY IN DEVEL MODE)",
    dest="xxx")

GLSettings.parser.add_option("-o", "--orm-debug", action='store_true',
    help="enable ORM debugging (AVAILABLE ONLY IN DEVEL MODE)",
    dest="orm_debug", default=False)

GLSettings.parser.add_option("-j", "--request-log", action="store_true",
    help="enable request/response logging (AVAILABLE ONLY IN DEVEL MODE)",
    dest="log_requests_responses", default=False)

GLSettings.parser.add_option("-S", "--request-stats", action='store_true',
    help="enable requests timing stats (AVAILABLE ONLY IN DEVEL MODE)",
    dest="log_timing_stats", default=False)

GLSettings.parser.add_option("-v", "--version", action='store_true',
    help="show the version of the software (spoiler: %s)" % GLSettings.version_string,
    dest="version")


# here the options are parsed, because sys.argv array is whack below
(GLSettings.cmdline_options, args) = GLSettings.parser.parse_args()

if GLSettings.cmdline_options.version:
    print("Owb Version:", GLSettings.version_string)
    print("Owb DB version:", DATABASE_VERSION)
    quit()

GLSettings.load_cmdline_options()

if GLSettings.cmdline_options.kill:
    try:
        with open(GLSettings.pidfile_path, "r") as fd:
            target_pid = int(fd.read())
        os.kill(target_pid, GLSettings.cmdline_options.kill)
        os.remove(GLSettings.pidfile_path)
    except Exception as excep:
        print("Unable kill PID found in %s: kill option ignored (%s)" % (GLSettings.pidfile_path, excep))

if GLSettings.start_clean:
    if GLSettings.devel_mode or \
      query_yes_no("Owb --start-clean is going to delete %s\nAre you sure?" % GLSettings.working_path, "no"):
        GLSettings.remove_directories()

os.umask(077)
GLSettings.create_directories()
GLSettings.cleaning_dead_files()

backend_script = os.path.join(GLSettings.root_path, 'globaleaks', 'backend.py')

args =['-y', backend_script]
if GLSettings.nodaemon:
    args += ['-n']

args +=['--pidfile', GLSettings.pidfile_path]

# we disable twistd logging as we manage only a globaleaks controlled logging
args +=['--logfile', os.devnull]

sys.argv[1:] = args

def run_backend():
    # Check presence of an existing database and eventually perform its migration
    db_status = check_db_files()
    if db_status == -1:
        return
    elif db_status == 0:
        GLSettings.initialize_db = True
    else:
        GLSettings.initialize_db = False

    print("Owb is now running and accessible at the following urls:")

    for ip in GLSettings.bind_addresses:
        print("- http://%s:%d" % (ip, GLSettings.bind_port))

    for host in GLSettings.accepted_hosts:
        if host not in GLSettings.bind_addresses:
            print("- http://%s:%d" % (host, GLSettings.bind_port))

    if GLSettings.tor_address is not None:
        print("- http://%s" % (GLSettings.tor_address))

    log.start_logging()

    sys.excepthook = mail_exception_handler

    config = ServerOptions()
    try:
        config.parseOptions()
    except usage.error, ue:
        print("%s: %s" % (sys.argv[0], ue))
    else:
        try:
            GlobaLeaksRunner(config).run()

            # this is a blocking operation, until app exit

            print("Exiting Owb")
        except Exception as excep:
            print("Unable to start Owb: %s" % excep)
            quit(-1)

# "And now his watch begins"
run_backend()
# "And now his watch is ended"
